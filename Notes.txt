Dev Hub = It is the main Salesforce org that I will use to create and manage my scratch orgs
Scratch Org = It is a source-driven and disposable deployment of Salesforce code and metadata. Scratch Orgs are driven by 
source, Sandboxes and copies of production.

Scratch orgs do not replace sandboxes!!

- A very usefull resource is developer.salesforce.com for components designed already. like card
- A very usefull resource for styling is https://www.lightningdesignsystem.com/

I can use @track for address for example or any data that needs to be digged ( in case of the object
I need to access the propery so it will not work without annotation of track. ).
However, I do prefer to mutate the data with the spread operator.

!!! In other words, always remember when I am using OBJECT or ARRAY, I should use @track OR to update directly
the value of the property, not the specific field inside that object.

@track Property : 
When a field contains an object or an array, there's a limit to the depth of changes that are tracked. To tell the
framework to observe changes to the properties of an object or to the elements of an array, decorate the field with
@track.

Normal Property vs @track property
Without using @track, the framework observes changes that assign a new value to a field/property. If the new value is 
not === to the previousvalue, the component re-renders.!!!


==============
Regarding Template Looping 
- The Key must be a number or string, it can not be an object. I can not use the index as a value for the key!

Iterator Looping
<template iterator=iteratorName={array}>
</template>

iterator = It is a keyword to tell template that it is an iterator Looping
iteratorName = It is the value of the current element in the loop. It is an alias and can be anyname
array = It is the data on which I want to apply loop

Properties of iterator
value = The value of the item in the list. I will use this property to access the properties of the array
For example: iteratorName.value.propertyName

index = The index of the item in the list. 
For example: iteratorName.index

first = A boolean value indicating whether this item is the first item in the list
Fir example: iteratorName.first

last = A boolean value indicating whether this item is the last item in the list.
For example: iteratorName.last