*************************** LIFECYCLE HOOKS ***************************
A JavaScript callback is a function which is to be executed after another function has finished execution.
A more formal definition would be - Any function that is passed as an argument to another function so that
 it can be executed in that other function is called as a callback function


A lifecycle hook is a callback method triggered at a specific phase of a component instance lifecycle.
So these are the methods in the component that called a specific level or a specific phase.

There are 3 types of phase in my component lifecycle : 
1. Mounting phase
2. Unmounting phase
3. Error phase


======================================== MOUNTING PHASE ========================================
Methods : 
- constructor()
- connectedCallback()
- render() 
- renderedCallback()

Technically the render() method is not a lifecycle hook, it is a protected method on the lightning element class.

--- constructor METHOD ---
*) Is invoked, when a component instance is created.
*) I have to call super() first inside this
*) At this point, the component properties won't be ready yet.
*) To access the host element, use this.template
*) This method lifecycle flows from Parent to Child component
*) I can't access child elements in the component body because they don't exist yet,
*) Don't add attribute to the host element in the constructor

--- connectedCallback METHOD ---
*) Called when the element is inserted into a document
*) This hook flows from parent to child
*) I can not access child elements in the component body because they don't exist yet
*) I can access the host element with this.template!!!
*) use it to: Perform initialization tasks, such as fetch data, set up caches, or listen for events ( such as publish-
subscribe events)
*) do NOT use: connectedCallback() to change the state of a component, such as loading values or setting properties.
I should use GETTERS and SETTERS instead!!!

--- connectedCallback METHOD ---
*) Fires when a component rendering is done
*) It can fire more than once
*) This hook flows from a child to parent
*) When a component re-renders, all the expressions used in the template are reevaluated
 Do not use renderedCallback() :
 - to change the state or update property of a component
 - Don't update a wire adapter configuration object property in this method, as it can result in an infinite loop 



======================================== UNMOUNTING PHASE ========================================
Whenever my component is removing from DOM, that time this phase occur. It has only 1 method : disconnectedCallback()
*) Fires when a component is removed from the DOM
*) It flows from parent to child
*) This callback method is specific to LWC, it isn't from the HTML custom elements specification.


======================================== ERROR PHASE ========================================
Whenever any of my callback of lifecycle hook throws an error, an error phase occurs. To catch that error I use the 
errorCallback() method.

*) This method called when a descendant component throws an error in one of its callback.
*) The error argument is a JavaScript native error object, and the stack argument is a string
*) This callback method is specific to LWC, it isn't from the HTML custom elements specification