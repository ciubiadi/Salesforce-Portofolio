*************************** LIFECYCLE HOOKS ***************************
A JavaScript callback is a function which is to be executed after another function has finished execution.
A more formal definition would be - Any function that is passed as an argument to another function so that
 it can be executed in that other function is called as a callback function


A lifecycle hook is a callback method triggered at a specific phase of a component instance lifecycle.
So these are the methods in the component that called a specific level or a specific phase.

There are 3 types of phase in my component lifecycle : 
1. Mounting phase
2. Unmounting phase
3. Error phase

========== Mountin Phase ==========
Methods : 
1) constructor()
2) connectedCallback()
3) render() 
4) renderedCallback()

Technically the render() method is not a lifecycle hook, it is a protected method on the lightning element class.


========== Mountin Phase ==========
Whenever my component is removing from DOM, that time this phase occur. It has only 1 method : disconnectedCallback()


========== Mountin Phase ==========
Whenever any of my callback of lifecycle hook throws an error, an error phase occurs. To catch that error I use the 
errorCallback() method.
